apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

RES_PATH = RES_PATH.replace("\\", "/")
COCOS_ENGINE_PATH = COCOS_ENGINE_PATH.replace("\\", "/")
COCOS_ASSETS_PATH = COCOS_ASSETS_PATH.replace("\\", "/")
COCOS_RUNTIME_PATH = COCOS_RUNTIME_PATH.replace("\\", "/")

buildDir = project.projectDir.path
android {

    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION
    ndkPath PROP_NDK_PATH
    namespace "com.mashiro.cocos"

    defaultConfig {
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                cppFlags "-frtti -std=c++11 -fsigned-char"
                arguments "-DANDROID_STL=c++_static",
                        "-DANDROID_ABI=${PROP_APP_ABI}",
                        "-DNDK_DEBUG=${NDK_DEBUG}",
                        "-DPROP_APP_ABI=${PROP_APP_ABI}",
                        "-DPROP_APP_PLATFORM=${PROP_APP_PLATFORM}",
                        "-DCOCOS_RUNTIME_PATH=${COCOS_RUNTIME_PATH}",
                abiFilters PROP_APP_ABI
                path 'src/main/cpp/CMakeLists.txt'
            }
//            ndkBuild {
//                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
//                    // skip the NDK Build step if PROP_NDK_MODE is none
//                    targets 'cocos2djs'
//                    arguments 'NDK_TOOLCHAIN_VERSION=clang'
//                    def module_paths = [
//                            project.file("/Applications/Cocos/Creator/2.4.11/CocosCreator.app/Contents/Resources/cocos2d-x"),
//                            project.file("/Applications/Cocos/Creator/2.4.11/CocosCreator.app/Contents/Resources/cocos2d-x/cocos"),
//                            project.file("/Applications/Cocos/Creator/2.4.11/CocosCreator.app/Contents/Resources/cocos2d-x/external")]
//                    arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
//                    arguments '-j' + Runtime.runtime.availableProcessors()
//                }
//            }
            ndk {
                abiFilters PROP_APP_ABI.split(':')
            }
        }
    }

    sourceSets.main {
        java.srcDirs "../src", "src"
        res.srcDirs "../res", 'res'
        jniLibs.srcDirs "../libs", 'libs'
        manifest.srcFile "AndroidManifest.xml"
    }

    externalNativeBuild {
//        ndkBuild {
//            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
//                // skip the NDK Build step if PROP_NDK_MODE is none
//                path "./Android.mk"
//            }
//        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

//            externalNativeBuild {
//                ndkBuild {
//                    arguments 'NDK_DEBUG=0'
//                }
//            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
//            externalNativeBuild {
//                ndkBuild {
//                    arguments 'NDK_DEBUG=1'
//                }
//            }
        }
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/merged_assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        def sourceDir = COCOS_ASSETS_PATH

        copy {
            from "${sourceDir}"
            include "assets/**"
            include "src/**"
            include "jsb-adapter/**"
            into outputDir
        }

        copy {
            from "${sourceDir}/main.js"
            from "${sourceDir}/project.json"
            into outputDir
        }
    }
}

dependencies {
    implementation fileTree(dir: '../libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: "${COCOS_ENGINE_PATH}/cocos/platform/android/java/libs", include: ['*.jar'])
    implementation project(':libcocos2dx')
}
